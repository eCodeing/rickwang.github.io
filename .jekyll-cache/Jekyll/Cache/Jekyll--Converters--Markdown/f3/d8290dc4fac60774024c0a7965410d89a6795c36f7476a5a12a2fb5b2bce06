I"	Q<p>我们知道，web浏览器会将form中的内容打包成HTTP请求体，然后发送到服务端，服务端对请求体解析后可以得到传递的数据。这当中包含两个过程：<code class="highlighter-rouge">encode</code>与<code class="highlighter-rouge">decode</code>。</p>

<ul id="markdown-toc">
  <li><a href="#http" id="markdown-toc-http">HTTP</a></li>
  <li><a href="#urlencode" id="markdown-toc-urlencode">UrlEncode</a></li>
  <li><a href="#urldecode" id="markdown-toc-urldecode">UrlDecode</a></li>
  <li><a href="#方案" id="markdown-toc-方案">方案</a></li>
</ul>

<h1 id="http">HTTP</h1>

<p>我们使用ServerSocket搭建一个小服务器来看清http请求的全貌, 该服务器只有一个功能, 就是打印请求体。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpPrint</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">ServerSocket</span> <span class="n">serverSocket</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">HttpPrint</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">serverSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="mi">8080</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
            <span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
            <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
            <span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span>  <span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
            <span class="nc">ByteArrayOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ByteArrayOutputStream</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">while</span> <span class="o">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">))</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">n</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">os</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">new</span> <span class="nf">HttpPrint</span><span class="o">().</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用html页面来发送get与post请求</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://localhost:8080/hsp?param=你好全世界"</span><span class="nt">&gt;</span>Test<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"http://localhost:8080/hsp"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"param"</span> <span class="na">value=</span><span class="s">"你好全世界"</span><span class="nt">/&gt;</span>
   <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>启动服务器后，查看打印内容，在我的机器上，请求内容如下:</p>

<p>get</p>

<p><img src="/servlet-encode/get.png" alt="get" /></p>

<p>post</p>

<p><img src="/servlet-encode/post.png" alt="post" /></p>

<p>从post中的<code class="highlighter-rouge">Content-Type:application/x-www-form-urlencoded</code>可以看到，虽然数据为中文，但是在传递的时候，经过了一次urlEncode，这样一来，在数据交换层面就可以屏蔽编码的不一致性。</p>

<h1 id="urlencode">UrlEncode</h1>

<p><code class="highlighter-rouge">urlEncode</code>的任务是将form中的数据进行编码, 编码过程非常简单, 任何字符只要不是<code class="highlighter-rouge">ASCII</code>码, 它们都将被转换成字节形式, 每个字节都写成这种形式：一个 “%” 后面跟着两位16进制的数值。
urlEncode只能识别ASCII码，可以想象的是，那些urlEncode不能识别的字符，也就是十六进制数，一定是依赖于特定的字符集产生的, 字符集包括unicode,iso等。</p>

<p>那么浏览器用的是什么字符集呢? 答案是：默认与<code class="highlighter-rouge">contentType</code>相同, form可以通过属性<code class="highlighter-rouge">accept-charset</code>指定。</p>

<p>例如我们通常可以在jsp中看到这样的设置:</p>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@page </span><span class="na">contentType=</span><span class="s">"text/html;charset=UTF-8"</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<p>或者在html中这样设置:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"Content-Type"</span> <span class="na">content=</span><span class="s">"text/html; charset=UTF-8"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>这表示浏览器得到响应流之后，用contentType指定的字符集，将流中的字节转换为字符，同样地，也会用这个字符集将页面中字符转换为字节。</p>

<p>关于浏览器设定字符集的问题，我们不过多讨论，现在只需要知道有这么个过程就行了, 需要注意的是，无论浏览器使用什么字符集，服务端都是无法获知的。
这里需要换位考虑一下，浏览器是一个客户端，应该让客户端 “迁就” 服务端, 所以浏览器请求一个服务的时候，应该让浏览器考虑服务端支持什么字符集, 得到了响应后, 用服务端告诉浏览器的字符集进行解析。</p>

<h1 id="urldecode">UrlDecode</h1>

<p>现在我们将目光转向Servlet, 并使用上面的html来请求服务，请确保请求的字符集为<code class="highlighter-rouge">unicode</code>, 应用服务器使用tomcat6。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletPrint</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"param"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">doPost</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>get与post结果如下，果然如预料中乱码了。</p>

<p><img src="/servlet-encode/param.png" alt="param" /></p>

<p>现在我们从Servlet中看看请求体, 修改上面的Servlet代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletPrint</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">//System.out.println(req.getParameter("param"));</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ByteArrayOutputStream</span><span class="o">();</span>
        <span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">buf</span><span class="o">.</span><span class="na">length</span><span class="o">))&gt;-</span><span class="mi">1</span><span class="o">){</span>
            <span class="n">bos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">String</span> <span class="n">param</span> <span class="o">=</span> <span class="n">bos</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">param</span><span class="o">,</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">doPost</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>get与post结果如下,Servlet将http头部解析完成后，将请求体留了下来供应用程序使用, 这是考虑到http请求可能有多种 <a href="http://www.w3school.com.cn/tags/att_form_enctype.asp">enctype</a> , 请求体的结构可能不同,
例如，<code class="highlighter-rouge">multipart/form-data</code>就不是这样的key=value结构，关于multipart/form-data，我在这篇 <a href="https://ecodeing.github.io/rickwang.github.io/blog/web/2014-03-15/file-upload">fileupload</a> 中曾有过简要分析。</p>

<p><img src="/servlet-encode/body-utf.png" alt="body-utf" /></p>

<p>从图中可以看到, 设置了正确的字符集后, 服务端将能够正确地解析, get部分什么都没有，这是因为get没有请求体。</p>

<p>让我们换种字符集试试, 比如, 将servet中的”utf-8”换成”iso-8859-1”。</p>

<p><img src="/servlet-encode/body-iso.png" alt="body-iso" /></p>

<p>嘿，果然如我所料，而且这个字符串好像很眼熟，和req.getParameter(“param”)结果是一样的，没错，事实上，tomcat默认的字符集就是<code class="highlighter-rouge">iso-8859-1</code>, 我们从中可以得到一个推论，tomcat使用默认的字符集，对http请求进行过一次decode。</p>

<h1 id="方案">方案</h1>

<p><code class="highlighter-rouge">urlDecode</code>的任务是将请求中的百分号码转换成字符，显而易见的是，使用与<code class="highlighter-rouge">urlEncode</code>时相同的字符集才能成功转换。通常的做法是，让服务端支持涵盖多国语言的”utf-8”，然后让客户端也用”utf-8”请求服务。</p>

<p>指定服务端字符集的方式有两种，一是修改应用服务器的默认编码，二是添加一个过滤器进行编码转换, 方法一最方便, 但是影响了程序的可移植性, 方法二可移植, 它只需要做一件事:<code class="highlighter-rouge">requet.setCharacterEncoding("UTF-8");</code>,
实际上，该过滤器并没有进行任何编码转换的工作，它仅仅只是一个配置，该配置项将被后续程序使用，这些后续程序包括web服务器内置的解析程序，以及第三方解析工具等。</p>

<p>需要注意的是，requet.setCharacterEncoding(“UTF-8”);，只对请求体有效，也就是说，请求头不归它管，而是由web服务器采用自己配置的字符编码进行解析，此时如果url中包含中文（如get请求的参数），那么将不可避免地出现字符丢失。
解决办法是在客户端对url进行<code class="highlighter-rouge">encodeURI</code><strong>两次</strong>, 然后再在服务端<code class="highlighter-rouge">URLDecoder.decode(param,"utf-8");</code>。</p>

<p>为什么要 <a href="http://www.w3school.com.cn/jsref/jsref_encodeuri.asp">encodeURI</a> 两次？talk is cheap， let’s code！</p>

<p><img src="/servlet-encode/encodeURI.png" alt="encodeURI" /></p>

<p>注意观察这张图片，从中发现了什么? 没错，第一次encodeURI生成了HTTP一节的示例中一样的结果。
我们在浏览器窗口中输入 “http://localhost:8080/hsp?param=%E4%BD%A0%E5%A5%BD%E5%85%A8%E4%B8%96%E7%95%8C”, 会发现它变成了 “http://localhost:8080/hsp?param=你好全世界”,
在url里，浏览器认为%是个转义字符，浏览器会把%与%之间的编码，两位两位取出后进行decode, 也就是变回 “你好全世界”, 然后再用这个url发送请求, 最终实际发送的内容实际上还是<code class="highlighter-rouge">%E4%BD%A0%E5%A5%BD%E5%85%A8%E4%B8%96%E7%95%8C</code>。
换言之，以明文传递的这种url会被浏览器否决一次，再换言之，在js中进行一次encodeURI等于什么都没做。</p>

<p>再注意观察第2和第3个输出，有什么规律? 是的，从第二次开始encodeURI只是将<code class="highlighter-rouge">%</code>变成了<code class="highlighter-rouge">%25</code>，
根据我们刚才总结出的规律可知，在encodeURI两次的情况下，最后发送到浏览器中的数据为<code class="highlighter-rouge">%25E4%25BD%25A0%25E5%25A5%25BD%25E5%2585%25A8%25E4%25B8%2596%25E7%2595%258C</code>,
理所当然的，web服务器将使用默认的字符集对其decode, 然而, 无论选择哪种字符集, 将<code class="highlighter-rouge">%25</code>转换成<code class="highlighter-rouge">%</code>总是不会出错的, decode之后，<code class="highlighter-rouge">%E4%BD%A0%E5%A5%BD%E5%85%A8%E4%B8%96%E7%95%8C</code> 将完整地送到Servlet手上。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"param"</span><span class="o">),</span><span class="s">"utf-8"</span><span class="o">));</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">http://localhost:8080/hsp?param=</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">encodeURI</span><span class="p">(</span><span class="nb">encodeURI</span><span class="p">(</span><span class="dl">'</span><span class="s1">你好全世界</span><span class="dl">'</span><span class="p">));</span>
</code></pre></div></div>

<p><img src="/servlet-encode/world.png" alt="world" /></p>

:ET